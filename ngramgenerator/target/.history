sbt:ttt> run
run
exit
run
quit
exit
run
rdd
run
val
val s = scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" ).mkString
val s : String = scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt").mkString
eval scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" ).mkString
eval scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" ).mkString.parallelize
parallelize(scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" ).mkString)
eval parallelize(scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" ).mkString)
eval spark.sparkContext.parallelize(scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" ).mkString)
eval scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" ).mkString.par
run
eval
  def main(args: Array[String]): Unit = {
eval 
  def main(args: Array[String]): Unit = {
eval scala.io.Source.fromFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" )
run
A
run
ù
run
ù
eval spark.sparkContext.textFile("/home/carlo/Scrivania/PROGETTO scp/ttt/src/test.txt" ).cache()
ù
run
let src = "HELLOOOOO"
clean
run
evicted
run
runù
run
ù
run
runù
run
runù
run
runù
run
runù
run
runù
run
runù
run
runù
run
runù
run
ù
run
runù
run
runù
run
compile
packageù
package
assembly
run
compile
run
run )
    
compile
run
compile
run "./resources/test.txt"
run "./resources/en_US.blogs.txt"
run "./resources/test.txt"
compile
clean package
clean
package
compile
run "./resources/test.txt"
run
compile
run
quit
exit
run
compile
rub
run
run "./resources/test.txt"
compile
run
run "./resources/test.txt"
compile
run "./resources/test.txt"
compile
run "./resources/test.txt"
run "resources/test.txt"
compile
run "resources/test.txt"
quit
exit
compile
run "resources/test.txt"
run "resources/test.txt" 3
run "resources/test.txt" 3 "./output2/"
compile
run
run "resources/test.txt" 3 "./output2/"
run
run "resources/test.txt" 3 "./output2/"
run "resources/test2.txt" 3 "./output2/"
assembly
clean
package
exit
evicted
package
run "../resources/test2.txt" 3 "..resources/output2/"
package
run "../resources/test2.txt" 3 "../resources/output2/"
run "../../resources/test2.txt" 3 "../../resources/output2/"
exit
